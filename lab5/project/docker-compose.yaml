version: '3.4'

x-redash-service: &redash-service
  image: redash/redash:8.0.0.b32245
  depends_on:
    - redash-postgres
    - redash-redis
  env_file: ./redash/redash.env
  restart: always

volumes:
  prometheus_data: {}
  influxdb_data: {}
  grafana_data: {}
  mongo_data: {}
  redash_data: {}

services: 
  worker-scraper:
    build: .
    image: &img worker 
    command: [celery, worker, --app=worker_scraper.app, --queues=scraper]
    env_file: &env_files
      - praw_credentials.env
      - app_settings.env
      - mongo_root_credentials.env
    environment: &env
      - broker_protocol=amqp
      - broker_user=guest
      - broker_password=guest
      - broker_host=rabbitmq
      - broker_port=5672
      # - CELERY_BROKER_URL=amqp://guest:guest@rabbitmq:5672
      - CELERY_RESULT_BACKEND=rpc
      - CELERY_WORKER_SEND_TASK_EVENTS=True
      - influxdb_host=influxdb
      - influxdb_user=root
      - influxdb_password=root
      - mongodb_protocol=mongodb
      - mongodb_host=mongodb
      - mongodb_port=27017
    depends_on:
      - rabbitmq
      - influxdb
    links:
      - influxdb
    volumes:
      - ./app:/app 
    restart: 'always'

  beat-scraper:
    build: .
    image: *img
    command: [celery, beat, --app=worker_scraper.app]
    env_file: *env_files
    environment: *env
    depends_on: 
      - rabbitmq
      - influxdb
    links:
      - influxdb
    volumes: 
      - ./app:/app
    restart: 'always'

  worker-embedder:
    build: .
    image: *img
    command: [celery, worker, --app=worker_embedder.app, --queues=embedder]
    env_file: *env_files
    environment: *env
    depends_on: 
      - rabbitmq
    volumes: 
      - ./app:/app
      - ./embeddings:/home/celery/.magnitude
    restart: 'always'

  worker-mongo:
    build: .
    image: *img
    command: [celery, worker, --app=worker_mongo.app, --queues=mongo]
    env_file: *env_files
    environment: *env
    depends_on: 
      - rabbitmq
      - mongodb
    volumes: 
      - ./app:/app
    links:
      - "mongodb"
    restart: 'always'

  rabbitmq:
    image: rabbitmq:3.8
    environment: 
      - RABBITMQ_LOGS=./rabbit/rabbitlogs.conf
    restart: 'always'

  celery-exporter:
    image: ovalmoney/celery-exporter
    command: [--enable-events]
    environment:     
      - CELERY_EXPORTER_BROKER_URL=amqp://guest:guest@rabbitmq:5672
      - CELERY_EXPORTER_LISTEN_ADDRESS=0.0.0.0:8887
    ports:
      - "8887:8887"
    depends_on: 
      - rabbitmq
    restart: 'always'

  prometheus:
    image: prom/prometheus
    depends_on: 
      - celery-exporter
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      [
        --config.file=/etc/prometheus/prometheus.yaml,
        --log.level=warn,
        --storage.tsdb.path=/prometheus
      ]
    ports:
      - "9090:9090"
    links:
      - "celery-exporter"
      - "beat-scraper"
    restart: 'always'

  influxdb:
    image: influxdb:1.8.3
    environment: 
      - INFLUXDB_LOGGING_LEVEL=error
      - INFLUXDB_CONTINUOUS_QUERIES_LOG_ENABLED=false
      - INFLUXDB_DATA_QUERY_LOG_ENABLED=false
      - INFLUXDB_HTTP_LOG_ENABLED=false
    volumes:
      - influxdb_data:/var/lib/influxdb2
    ports:
      - "8086:8086"
    restart: 'always'

  grafana:
    image: grafana/grafana
    depends_on:
      - prometheus
      - influxdb
    ports:
      - 3000:3000
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
      - ./grafana/grafana.ini:/etc/grafana/grafana.ini
    environment: 
      - GF_LOG_LEVEL=error
    links:
      - prometheus
      - influxdb
    restart: always

  mongodb:
    image: mongo
    command: [mongod, --auth]
    environment:
      - MONGO_INITDB_DATABASE=reddit
    env_file: 
      - mongo_root_credentials.env
    volumes:
      - ./mongo/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
      - mongo_data:/data/db
    ports:
      - '27017-27019:27017-27019'

  # REDASH SERVICES
  # based on https://github.com/getredash/setup/blob/master/data/docker-compose.yml
  # and https://discuss.redash.io/t/fatal-password-authentication-failed-for-user-postgres-after-docker-compose-up-d-on-your-ec2-ami/2443
  # to create postgres database run: docker-compose run --rm redash-server create_db

  redash-server:
    <<: *redash-service
    command: [server]
    ports:
      - "5000:5000"
    environment:
      REDASH_WEB_WORKERS: 4

  redash-scheduler:
    <<: *redash-service
    command: scheduler
    environment:
      QUEUES: "celery"
      WORKERS_COUNT: 1

  redash-scheduled-worker:
    <<: *redash-service
    command: worker
    environment:
      QUEUES: "scheduled_queries,schemas"
      WORKERS_COUNT: 1

  redash-adhoc-worker:
    <<: *redash-service
    command: worker
    environment:
      QUEUES: "queries"
      WORKERS_COUNT: 2

  redash-redis:
    image: redis:5.0-alpine
    restart: always

  redash-postgres:
    image: postgres:9.6-alpine
    env_file: ./redash/redash.env
    volumes:
      - redash_data:/var/lib/postgresql/data
    restart: always

  redash-nginx:
    image: redash/nginx:latest
    ports:
      - "90:80"
    depends_on:
      - redash-server
    links:
      - redash-server:redash
    restart: always